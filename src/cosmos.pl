%main Relation Any;find_flag1 Relation Any Any Any;find_flag0 Relation Any Any;do_query_module Relation Any Any;do_query Relation Any;interpreter Relation;eval_vars Relation Any Any Any Any;compile_module Relation Any Any Any;compile Relation Any Any Any;run_file Relation Any Any;compile_to_file Relation Any Any Any Any;run_query Relation Any Any Any Any Any;run_all Relation Any Any Any Any;Token FunctorObject;Cons FunctorObject
:- style_check([-singleton,-no_effect]), ensure_loaded("core.pl").
cosmos4(Env0,_e) :- obj_call2(Env0,"io","write",["RuntimeError: "]),writeln(_e).
cosmos3(Env0,_e) :- string_concat("CosmosError: ",_e,T34),obj_call2(Env0,"io","writeln",[T34]),false.
cosmos2(Env0,__,_y) :- eq(_y,_z).
cosmos1(Env0,_x,_s) :- string_concat("_",_x,T35),eq(_s,T35).
cosmos0(Env0,_e) :- string_concat("CosmosError: ",_e,T36),obj_call2(Env0,"io","writeln",[T36]),obj_call2(Env0,"logic","exit",[]).
:- ensure_loaded("lexer.pl").
:- ensure_loaded("parser.pl").
:- ensure_loaded("whitespacer.pl").
:- ensure_loaded("gen.pl").
cosmos_run_all(Env0,_s,_x,_module,_opts) :- obj_call2(Env0,"lexer","run",[_s,0,_l]),obj_call2(Env0,"whitespacer","run",[_l,_l2]),obj_call2(Env0,"parser","parse_world",[_l2,_,_fc]),obj_call2(Env0,"gen","generate_chunk",[_fc,_x,_module,_opts]).
cosmos_run_query(Env0,_s,_x,_prefix,_module,_query_vars) :- obj_call2(Env0,"lexer","run",[_s,0,_l]),obj_call2(Env0,"whitespacer","run",[_l,_l2]),(((obj_call2(Env0,"parser","parse_body",[_l2,_lfinal,_fc])),eq(_lfinal,'[|]'(fcToken(_,"EOF",_),[])));(obj_call2(Env0,"logic","throw",["cannot parse query"]))),obj_call2(Env0,"gen","generate_query",[_fc,_x,_prefix,_query_vars,_module]).
cosmos_compile_to_file(Env0,_module,_fname2,_code,_opts) :- string_concat("",_module,T3),dynamic_add(T3,".",T2),dynamic_add(T2,"cosmos",T1),eq(_name1,T1),obj_call2(Env0,"io","readFile",[_name1,_s]),env_call(Env0,"run_all",[Env0,_s,_code0,_module,_opts]),(((obj_call2(Env0,"list","has",[_opts,"--main"])),dynamic_add(_code0,"\nmain :- current_prolog_flag(argv, A), list_atom_string(A, B), ",T8),dynamic_add(T8,_module,T7),dynamic_add(T7,"_env(T), ",T6),dynamic_add(T6,_module,T5),dynamic_add(T5,"_main(T,B).",T4),eq(_code,T4));(eq(_code,_code0))),obj_call2(Env0,"io","writeToFile",[_fname2,_code]).
cosmos_run_file(Env0,_fname,_code) :- obj_call2(Env0,"io","readFile",[_fname,_s]),once(env_call(Env0,"run_all",[Env0,_s,_code,"temp",[]])).
cosmos_compile(Env0,_code_cosmos,_code_prolog,_module) :- once(env_call(Env0,"run_all",[Env0,_code_cosmos,_code_prolog,_module,[]])).
cosmos_compile_module(Env0,_module,_x,_opts) :- dynamic_add(_module,".",T10),dynamic_add(T10,"pl",T9),eq(_s2,T9),env_get(Env0,"compile_to_file",T11),obj_call2(Env0,"logic","applyCatch",[closure(T11,Env0),'[|]'(_module,'[|]'(_s2,'[|]'(_x,'[|]'(_opts,[])))),closure(cosmos0,Env0)]).
cosmos_eval_vars(Env0,_code,_prefix,_vars,_module) :- eq(_name,".temp.pl"),obj_call2(Env0,"list","map",[_vars,closure(cosmos1,Env0),_v2]),obj_call2(Env0,"list","join",[_v2,", ",_v3]),string_concat(":- style_check([-singleton,-no_effect]), ensure_loaded(\"core.pl\").\n",_prefix,T18),dynamic_add(T18,_module,T17),dynamic_add(T17,"(",T16),dynamic_add(T16,_v3,T15),dynamic_add(T15,") :- ",T14),dynamic_add(T14,_code,T13),dynamic_add(T13,".",T12),eq(_file_code,T12),obj_call2(Env0,"io","writeToFile",[_name,_file_code]),obj_call2(Env0,"list","map",[_vars,closure(cosmos2,Env0),_v4]),consult(_name),atom_string(_atom_temp,"temp"),atom_string(_atom_writeln,"writeln"),apply_forall_custom_vars(_atom_temp,_vars,_v4).
cosmos_interpreter(Env0) :- eq(_module,"temp"),obj_call2(Env0,"io","write",["> "]),obj_call2(Env0,"io","read",[_input]),(((env_get(Env0,"run_query",T19),obj_call2(Env0,"logic","applyCatch",[closure(T19,Env0),'[|]'(_input,'[|]'(_code,'[|]'(_prefix,'[|]'(_module,'[|]'(_vars,[]))))),closure(cosmos3,Env0)])),env_get(Env0,"eval_vars",T20),obj_call2(Env0,"logic","applyCatch",[closure(T20,Env0),'[|]'(_code,'[|]'(_prefix,'[|]'(_vars,'[|]'(_module,[])))),closure(cosmos4,Env0)]));true),env_call(Env0,"interpreter",[Env0]).
cosmos_do_query(Env0,_q) :- eq(_module,"temp"),string_concat("> ",_q,T21),obj_call2(Env0,"io","writeln",[T21]),env_call(Env0,"run_query",[Env0,_q,_code_query,_prefix,_module,_vars]),env_call(Env0,"eval_vars",[Env0,_code_query,_prefix,_vars,_module]).
cosmos_do_query_module(Env0,_q,_module) :- string_concat("> ",_q,T22),obj_call2(Env0,"io","writeln",[T22]),env_call(Env0,"run_query",[Env0,_q,_code_query,_prefix,_module,_vars]),env_call(Env0,"eval_vars",[Env0,_code_query,"",_vars,"temp"]).
cosmos_find_flag0(Env0,_args,_flag) :- (((eq(_args, '[|]'(_a,_b))),(((eq(_a,_flag)),true);(env_call(Env0,"find_flag0",[Env0,_b,_flag]))));(false)).
cosmos_find_flag1(Env0,_args,_flag,_name) :- (((eq(_args, '[|]'(_a,_b))),eq(_b, '[|]'(_c,_d)),(((eq(_a,_flag)),eq(_c,_name));(env_call(Env0,"find_flag1",[Env0,_b,_flag,_name]))));(false)).
cosmos_main(Env0,_args) :- eq(_version,"Cosmos 0.05 (Abyss) very alpha"),(((env_call(Env0,"find_flag0",[Env0,_args,"-h"])),obj_call2(Env0,"io","writeln",[_version]),string_concat("\n-h\t\t\tGet help.\n","-i\t\t\tOpen interpreter.\n",T27),dynamic_add(T27,"-q [str]\t\tMake query.\n",T26),dynamic_add(T26,"--module [name]\t\tCompile name.cosmos to name.pl\n",T25),dynamic_add(T25,"--no-std-libs\t\tDon't load stdlibs.\n",T24),dynamic_add(T24,"\n  e.g. cosmos --module test -q main(x)   //compile test.cosmos and run `main(x)`",T23),obj_call2(Env0,"io","writeln",[T23]));((env_call(Env0,"find_flag1",[Env0,_args,"--module",_name])),(((env_call(Env0,"find_flag0",[Env0,_args,"--no-std-libs"])),eq(_opts,'[|]'("--no-std-libs",[])));(eq(_opts,[]))),(((env_call(Env0,"find_flag0",[Env0,_args,"--main"])),obj_call2(Env0,"list","push",[_opts,"--main",_opts2]),env_call(Env0,"compile_module",[Env0,_name,_code0,_opts2]),dynamic_add(_code0,"\nmain :- current_prolog_flag(argv, A), list_atom_string(A, B), ",T32),dynamic_add(T32,_name,T31),dynamic_add(T31,"_env(T), ",T30),dynamic_add(T30,_name,T29),dynamic_add(T29,"_main(T,B).",T28),eq(_code,T28));(env_call(Env0,"compile_module",[Env0,_name,_code,_opts]))),(((env_call(Env0,"find_flag1",[Env0,_args,"-q",_q])),dynamic_add(_name,".pl",T33),consult(T33),env_call(Env0,"do_query_module",[Env0,_q,_name]));true),(((env_call(Env0,"find_flag0",[Env0,_args,"-i"])),env_call(Env0,"interpreter",[Env0]));true));((env_call(Env0,"find_flag1",[Env0,_args,"-q",_q])),env_call(Env0,"do_query",[Env0,_q]),(((env_call(Env0,"find_flag0",[Env0,_args,"-i"])),env_call(Env0,"interpreter",[Env0]));true));((env_call(Env0,"find_flag0",[Env0,_args,"-i"])),obj_call2(Env0,"io","writeln",[_version]),env_call(Env0,"interpreter",[Env0]));((env_call(Env0,"find_flag0",[Env0,_args,"-v"])),obj_call2(Env0,"io","writeln",[_version]))).
cosmos_env(X) :- new(X0),set(X0,"main",cosmos_main,X1),set(X1,"find_flag1",cosmos_find_flag1,X2),set(X2,"find_flag0",cosmos_find_flag0,X3),set(X3,"do_query_module",cosmos_do_query_module,X4),set(X4,"do_query",cosmos_do_query,X5),set(X5,"interpreter",cosmos_interpreter,X6),set(X6,"eval_vars",cosmos_eval_vars,X7),set(X7,"compile_module",cosmos_compile_module,X8),set(X8,"compile",cosmos_compile,X9),set(X9,"run_file",cosmos_run_file,X10),set(X10,"compile_to_file",cosmos_compile_to_file,X11),set(X11,"run_query",cosmos_run_query,X12),set(X12,"run_all",cosmos_run_all,X13),gen_env(Y13),set(X13,"gen",Y13,X14),whitespacer_env(Y14),set(X14,"whitespacer",Y14,X15),parser_env(Y15),set(X15,"parser",Y15,X16),lexer_env(Y16),set(X16,"lexer",Y16,X17),set(X17,"Token",cosmos_Token,X18),set(X18,"Cons",cosmos_Cons,X19),table_env(Y19),set(X19,"table",Y19,X20),list_env(Y20),set(X20,"list",Y20,X21),string_env(Y21),set(X21,"string",Y21,X22),math_env(Y22),set(X22,"math",Y22,X23),io_env(Y23),set(X23,"io",Y23,X24),logic_env(Y24),set(X24,"logic",Y24,X25),set(X25,"Cons",cosmos_Cons,X26),set(X26,"Some",cosmos_Some,X27),set(X27,"None",cosmos_None,X28),set(X28,"Left",cosmos_Left,X29),set(X29,"Right",cosmos_Right,X30),X=X30.
main :- current_prolog_flag(argv, A), list_atom_string(A, B), cosmos_env(T), cosmos_main(T,B).